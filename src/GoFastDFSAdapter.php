<?php
/**
 * go-fastdfs方法适配器
 * User: chenbing
 * Date: 2021/6/10
 * Time: 14:24
 */
namespace Xiaobingge\Fastdfs;

use League\Flysystem\Adapter\AbstractAdapter;
use League\Flysystem\Config;
use League\Flysystem\Util;

/**
 * Class GoFastDFSAdapter
 */
class GoFastDFSAdapter extends AbstractAdapter
{
    /** @var string  */
    private $domain;

    /** @var string  */
    private $group;

    /** @var string  */
    private $scene;

    /** @var string  */
    private $baseUrl;

    /**
     * FastDFSAdapter constructor.
     * @throws \Exception
     */
    public function __construct($config = [])
    {
        $this->domain = $config['domain'];

        $this->group = $config['group'];

        $this->scene = $config['scene'];

        $this->baseUrl = $config['domain']."/".$config['group'];
    }

    public function createDir($dirname, Config $config)
    {
        // TODO: Implement createDir() method.
    }
    public function listContents($directory = '', $recursive = false)
    {
        // TODO: Implement listContents() method.
    }

    public function copy($path, $newpath)
    {
        // TODO: Implement copy() method.
    }

    public function update($path, $contents, Config $config)
    {
        // TODO: Implement update() method.
    }

    public function updateStream($path, $resource, Config $config)
    {
        // TODO: Implement updateStream() method.
    }

    public function delete($path)
    {
        // TODO: Implement delete() method.
        try{
            $client = new \GuzzleHttp\Client(['timeout' =>10]);
            $result = $client->get($this->baseUrl."/delete", ['query' => ['path'=>$path]]);
            if (200 == $result->getStatusCode() && $result = json_decode($result->getBody(), true)) {
                return true;
            }
        }catch (\Exception $e){
            return false;
        }
        return false;
    }

    public function deleteDir($dirname)
    {
        // TODO: Implement deleteDir() method.
    }

    public function rename($path, $newpath)
    {
        // TODO: Implement rename() method.
    }

    public function setPathPrefix($prefix)
    {
        // TODO: Change the autogenerated stub
    }

    public function setVisibility($path, $visibility)
    {
        // TODO: Implement setVisibility() method.
    }

    public function getSize($path)
    {
        // TODO: Implement getSize() method.
        try{
            $client = new \GuzzleHttp\Client(['timeout' =>10]);
            $result = $client->get($this->baseUrl."/get_file_info", ['query' => ['path'=>$path]]);
            if (200 == $result->getStatusCode() && $result = json_decode($result->getBody(), true)) {
                return $result['data'];
            }
        }catch (\Exception $e){
            return false;
        }
        return false;
    }

    public function getPathPrefix()
    {
        // TODO: Change the autogenerated stub
        return parent::getPathPrefix();
    }

    public function getMetadata($path)
    {
        // TODO: Implement getMetadata() method.
    }

    public function getTimestamp($path)
    {
        // TODO: Implement getTimestamp() method.
    }

    public function getVisibility($path)
    {
        // TODO: Implement getVisibility() method.
    }

    public function getMimetype($path)
    {
        // TODO: Implement getMimetype() method.
    }

    /**
     * 检测文件是否存在
     *
     * @param string $path
     *
     * @return array|bool|null
     */
    public function has($path)
    {
        // TODO: Implement has() method.
    }

    /**
     * 下载整个文件
     * @param string $path
     *
     * @return array|false
     *
     * @throws \Exception
     */
    public function read($path)
    {
        $url = $this->baseUrl.'/'.$path;
        return ['contents' => file_get_contents($url)];
    }

    /**
     * 该方法需提供fastdfs的storage 的http访问功能
     * @param string $path
     *
     * @return array|bool|false
     *
     * @throws \Exception
     */
    public function readStream($path)
    {
        $resource = $this->baseUrl.'/'.$path;
        return [
            'stream' => $resource = fopen($resource, 'r')
        ];
    }

    /**
     * 上传文件
     * @param string $path
     * @param string $contents
     * @param Config $config
     * @return array|bool
     */
    public function write($path, $contents, Config $config)
    {
        try{
            $client = new \GuzzleHttp\Client(['timeout' => 300]);
            $options = [
                ['name' => 'file', 'contents' => $contents, 'filename' => basename($path)],
                ['name' => 'output', 'contents' => 'json'],
                ['name' => 'path', 'contents' => dirname($path)],
                ['name' => 'scene', 'contents' => $this->scene]
            ];
            $result = $client->post($this->baseUrl."/upload", ['multipart' => $options]);
            if (200 == $result->getStatusCode() && $result = json_decode($result->getBody(), true)) {
                return true;
            }
        }catch (\Exception $e){
            return false;
        }
        return false;
    }

    /**
     * 流文件上传
     *
     * @param string   $path
     * @param resource $resource
     * @param Config   $config
     *
     * @return array|bool|false|string
     */
    public function writeStream($path, $resource, Config $config)
    {
        try{
            $client = new \GuzzleHttp\Client(['timeout' => 300]);
            $options = [
                ['name' => 'file', 'contents' => $resource, 'filename' => basename($path)],
                ['name' => 'output', 'contents' => 'json'],
                ['name' => 'path', 'contents' => dirname($path)],
                ['name' => 'scene', 'contents' => $this->scene]
            ];
            $result = $client->post($this->baseUrl."/upload", ['multipart' => $options]);
            if (200 == $result->getStatusCode() && $result = json_decode($result->getBody(), true)) {
                return $result;
            }
        }catch (\Exception $e) {
            return false;
        }
        return false;
    }
}